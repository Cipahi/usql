/*
This script uses user defined operators and aggregates 
*/

DECLARE @INPUT_FILE string = @"/Samples/Data/AmbulanceData/Drivers.txt";

//Extract first and last names as separate columns using a custom extractor
@drivers =
    EXTRACT id string,
            first_name string,
            last_name string,
            address string,
            city string,
            region string,
            zipcode string,
            country string,
            phone_numbers string
    FROM @INPUT_FILE
    USING new Samples.SampleExtractor(Encoding.UTF8);

OUTPUT @drivers
TO @"/Samples/Output/drivers.txt"
USING Outputters.Csv(quoting:false);

//Use a user defined function to see if the user has an office phone, use inline C# to generate the full name of the user
@has_office_phone =
    SELECT first_name + " " + last_name AS name,
           Samples.SampleFunction.HasOfficePhone(phone_numbers) AS has_office_phone
    FROM @drivers;

OUTPUT @has_office_phone
TO @"/Samples/Output/has_office_phone.txt"
USING Outputters.Csv();

//Use a processor to get a reduced set of columns and also have the name of the form FirstInitial. Last Name
@drivers_processed =
    PROCESS @drivers
    PRODUCE name string,
            id int,
            zipcode string,
            country string
    USING new Samples.NameProcessor();

OUTPUT @drivers_processed
TO @"/Samples/Output/drivers_processed.txt"
USING Outputters.Csv(quoting:false);

//Use a user defined aggregator to calculate balance
//If the transaction type is "Debit", subtract from the balance, if the transaction type is "Credit", add to the balance
@transactions =
    EXTRACT transaction string,
            amount int
    FROM @"/Samples/Data/transactions.txt"
    USING Extractors.Csv();

@balance =
    SELECT AGG<Samples.SampleAggregate>(transaction, amount) AS balance
    FROM @transactions;

OUTPUT @balance
TO @"/Samples/Output/balance.txt"
USING Outputters.Csv();