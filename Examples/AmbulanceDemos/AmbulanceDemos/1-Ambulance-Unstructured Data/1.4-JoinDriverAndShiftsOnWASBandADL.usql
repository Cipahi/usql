//0. Initialize some parameters/constants
DECLARE @CONTAINER string = "ambulancedemo";
DECLARE @ACCT string = "mryskona2";

DECLARE @WASB_BASEURI string = "wasb://"+@CONTAINER+"@"+@ACCT+"/";

DECLARE @DRIVERFILE string = "Drivers.txt"; // TAB Separated Unicode file
DECLARE @TRIPFILE string = "DriverShiftTrips.csv"; // Excel CSV (ANSI)

DECLARE @WASB_INPUTDIR string = @WASB_BASEURI + "DemoData/";
DECLARE @WASB_DRIVER string = @WASB_INPUTDIR + @DRIVERFILE;

DECLARE @ADL_INPUTDIR string = "/Samples/Data/AmbulanceData/";
DECLARE @ADL_TRIPS string = @ADL_INPUTDIR + @TRIPFILE;

//Provide "second" WASB account as output
DECLARE @WASB_OUTPUTURI string = @WASB_BASEURI;
DECLARE @OUTPUTDIR string = @WASB_OUTPUTURI + "output/";
DECLARE @OUTPUT string = @OUTPUTDIR + "trips.txt";

//1. Extract from WASB
@DriversRAW =
 EXTRACT driver_id      int
       , name           string
       , street         string
	   , city           string
       , region         string
       , zipcode        string
       , country        string
       , phone_numbers  string // Map
 FROM @WASB_DRIVER
 USING Extractors.Text(delimiter: '\t', quoting: true, encoding:Encoding.Unicode );
 //alternative version with Tsv() and using defaults: USING Extractors.Tsv(encoding: Encoding.Unicode );

//2. Extract from ADL Store
@TripsRAW =
 EXTRACT date       DateTime
       , driver_id  int
	   , vehicle_id int
       , trips      string // Array
 FROM @ADL_TRIPS
 USING Extractors.Text(quoting: true );

@Drivers =
 SELECT driver_id, name, street, city, region, zipcode, country
     , phone_numbers == "" ? null :
       new SQL.MAP<string,string> (from p in phone_numbers.Split(',') select new KeyValuePair<string, string>(p.Split(':')[0],p.Split(':')[1])) AS phone_numbers
 // Alternative:
 //  , new SQL.MAP<string,string> (phone_numbers.Split(',').Select(p => new KeyValuePair<string, string>(p.Split(':')[0],p.Split(':')[1])) AS phone_numbers
 FROM @DriversRAW;


@Trips =
    SELECT date
         , driver_id
         , vehicle_id
         , trips == null ? null : new SQL.ARRAY<int>(trips.Split(',').Select(x => Convert.ToInt32(x))) AS trip_ids
    FROM @TripsRAW;

@Exploded_Drivers =
    SELECT driver_id, name, street, city, region, zipcode, country
         , P.phone_type, P.phone_number
    FROM @Drivers AS d
      CROSS APPLY EXPLODE (d.phone_numbers) AS P(phone_type, phone_number); 

@Exploded_Trips =
 SELECT date
      , driver_id
      , vehicle_id
      , trip_id
 FROM @Trips CROSS APPLY EXPLODE (trip_ids) AS T(trip_id);

//3. Join 
// Note the quoted identifier
// U-SQL JOINS: 
// - Supports all kinds of joins: [INNER] JOIN, (LEFT | RIGHT | FULL) OUTER JOIN, CROSS JOIN, SEMI JOIN 
// - Join conditions have to be constant comparisons (use additional rowset variables if you need to perform calculations
// - only comparison supported are equality
// - old-style joins of the form FROM A, B WHERE condition is disallowed
@DriverTrips =
    SELECT d.name
         , d.street
         , d.city
         , t.vehicle_id
         , t.date
    FROM @Exploded_Drivers AS d
    LEFT OUTER JOIN @Exploded_Trips AS t
    ON d.driver_id == t.driver_id;

//3. Output
// leaving encoding away will produce UTF-8
OUTPUT @DriverTrips
TO @OUTPUT
ORDER BY name,
         date
USING Outputters.Text(encoding:System.Text.Encoding.Unicode); 